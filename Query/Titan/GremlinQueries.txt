
// for in-memory backend
//graph = TitanFactory.build().set('storage.backend', 'inmemory').open()
// for hbase backend
graph = TitanFactory.open('/usr/local/titan/conf/titan-hbase.properties') 

// creating property keys
mgmt = graph.getManagementSystem()

// node properties
type = mgmt.makePropertyKey('type').dataType(String.class).make()
uri = mgmt.makePropertyKey('uri').dataType(String.class).make()
researchAssistant = mgmt.makePropertyKey('researchAssistant').dataType(Boolean.class).make()
name = mgmt.makePropertyKey('name').dataType(String.class).make()
emailAddress = mgmt.makePropertyKey('emailAddress').dataType(String.class).make()
telephone = mgmt.makePropertyKey('telephone').dataType(String.class).make()
researchInterest = mgmt.makePropertyKey('researchInterest').dataType(String.class).make()

// edge labels
takesCourse = mgmt.makeEdgeLabel('takesCourse').make()
teacherOf = mgmt.makeEdgeLabel('teacherOf').make()
undergraduateDegreeFrom = mgmt.makeEdgeLabel('undergraduateDegreeFrom').make()
mastersDegreeFrom = mgmt.makeEdgeLabel('mastersDegreeFrom').make()
doctoralDegreeFrom = mgmt.makeEdgeLabel('doctoralDegreeFrom').make()
advisor = mgmt.makeEdgeLabel('advisor').make()
memberOf = mgmt.makeEdgeLabel('memberOf').make()
publicationAuthor = mgmt.makeEdgeLabel('publicationAuthor').make()
headOf = mgmt.makeEdgeLabel('headOf').make()
teachingAssistantOf = mgmt.makeEdgeLabel('teachingAssistantOf').make()
subOrganizationOf = mgmt.makeEdgeLabel('subOrganizationOf').make()
worksFor = mgmt.makeEdgeLabel('worksFor').make()

mgmt.commit()

//Loading
start = System.currentTimeMillis();
GraphMLReader.inputGraph(graph, new FileInputStream("/mnt/data/benchmark/LUBM/LUBM/data/university_100.graphml"));
System.currentTimeMillis() - start;


//[Query 2]
start = System.currentTimeMillis();
new File("/mnt/data/benchmark/results/Titan/Query2.txt").withWriter { f -> graph.V.filter{it.type == 'GraduateStudent'}.as('graduate_student').out('memberOf').filter{it.type == 'Department'}.out('subOrganizationOf').filter{it.type == 'University'}.inE('undergraduateDegreeFrom').outV.retain('graduate_student').sideEffect { f << "${it.uri}\r\n"}.iterate() };
System.currentTimeMillis() - start;


//[Query 4] Bug
start = System.currentTimeMillis();
new File("/mnt/data/benchmark/results/Titan/Query4.txt").withWriter { f -> graph.V.has('uri', T.eq, 'http://www.Department0.University0.edu').in('worksFor').filter{it.type == 'AssistantProfessor' || it.type == 'AssociateProfessor' || it.type == 'FullProfessor'}.as('professor').sideEffect { f << "${it.uri}, ${it.name}, ${it.emailAddress}, ${it.telephone}\r\n"}.iterate() };
System.currentTimeMillis() - start;


//[Query 5]
start = System.currentTimeMillis();
new File("/mnt/data/benchmark/results/Titan/Query5.txt").withWriter { f -> graph.V.filter{it.type == 'Department' && it.uri == 'http://www.Department0.University0.edu'}.in('memberOf', 'worksFor').filter{it.type == 'UndergraduateStudent' || it.type == 'GraduateStudent' || it.type == 'Lecturer' || it.type == 'AssistantProfessor' || it.type =='AssociateProfessor' || it.type == 'FullProfessor'}.dedup().as('person').sideEffect { f << "${it.uri}\r\n"}.iterate() };
System.currentTimeMillis() - start;


//[Query 6]
start = System.currentTimeMillis();
new File("/mnt/data/benchmark/results/Titan/Query6.txt").withWriter { f -> graph.V.filter{it.type == 'UndergraduateStudent' || it.type == 'GraduateStudent'}.as('student').sideEffect { f << "${it.uri}\r\n"}.iterate() };
System.currentTimeMillis() - start;



//[Query 7]
start = System.currentTimeMillis();
course = null
new File("/mnt/data/benchmark/results/Titan/Query7.txt").withWriter { f -> graph.V.has('uri', T.eq, 'http://www.Department0.University0.edu/AssociateProfessor0').out('teacherOf').filter{it.type == 'Course' || it.type == 'GraduateCourse'}.as('course').sideEffect {course = "${it.uri}"}.in('takesCourse').filter{it.type == 'UndergraduateStudent' || it.type == 'GraduateStudent'}.as('student').sideEffect { f << "$course, ${it.uri}\r\n"}.iterate() };
System.currentTimeMillis() - start;


//[Query 8] 
start = System.currentTimeMillis();
department = null
new File("/mnt/data/benchmark/results/Titan/Query8.txt").withWriter { f -> graph.V.has('uri', T.eq, 'http://www.University0.edu').in('subOrganizationOf').filter{it.type == 'Department'}.as('department').sideEffect {department = "${it.uri}"}.in('memberOf').filter{it.type == 'UndergraduateStudent' || it.type == 'GraduateStudent'}.as('student').sideEffect { f << "$department, ${it.uri}, ${it.emailAddress}\r\n"}.iterate() };
System.currentTimeMillis() - start;


// [Query 9] ========================
start = System.currentTimeMillis();
graph.V.filter{it.type == 'UndergraduateStudent' || it.type == 'GraduateStudent'}.as('student').out('advisor').filter{it.type == 'AssistantProfessor' || it.type == 'AssociateProfessor' || it.type == 'FullProfessor'}.as('professor').out('teacherOf').filter{it.type == 'Course' || it.type == 'GraduateCourse'}.as('course').inE('takesCourse').outV.retain('student').select{it.uri};
System.currentTimeMillis() - start;


// [Query 12] =======================
start = System.currentTimeMillis();
graph.V.has('uri', T.eq, 'http://www.University0.edu').in('subOrganizationOf').filter{it.type == 'Department'}.as('department').in('headOf').as('head').back('department').in('worksFor').retain('head').select{it.uri}
System.currentTimeMillis() - start;


// [Query 14]
start = System.currentTimeMillis();
new File("/mnt/data/benchmark/results/Titan/Query14.txt").withWriter { f -> graph.V.filter{it.type == 'UndergraduateStudent'}.as('undergraduate').sideEffect { f << "${it.uri}\r\n"}.iterate() };
System.currentTimeMillis() - start;


